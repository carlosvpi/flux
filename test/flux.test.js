const { Flux } = require('../lib/flux')
const assert = require('assert').strict

describe('Flux constructor', () => {
  const flux = new Flux(1)
  it('has correct internal value', () => {
    assert.equal(flux._value, 1)
  })
  it('is not done', () => {
    assert.equal(flux._done, false)
  })
  it('publishes correctly', () => {
    flux.publish(2)
    assert.equal(flux._value, 2)
    assert.equal(flux._done, false)
  })
  it('ends correctly', () => {
    flux.end()
    assert.equal(flux._value, 2)
    assert.equal(flux._done, true)
  })
})

describe('Flux subscriptions', () => {
  const flux = new Flux(1)
  const subscription = (value) => {
      assert.equal(value, 2)
    }
  it('subscribes correctly', () => {
    flux.subscribe(subscription)
    flux.publish(2)
  })
  it('unsubscribes correctly', () => {
    flux.unsubscribe(subscription)
    flux.publish(3)
  })
})

describe('Flux other methods', () => {
  it('maps double a flux', () => {
    const flux = new Flux(1)
    const dup = flux.map(value => value * 2)
    flux.publish(4)
    assert.equal(dup._value, 8)
    flux.end()
    assert.equal(dup._done, true)
  })
  it('reduces sum a flux', () => {
    const flux = new Flux(1)
    const sum = flux.reduce((acc, value) => acc + value, 0)
    flux.publish(7)
    assert.equal(sum._value, 7)
    flux.publish(3)
    assert.equal(sum._value, 10)
    flux.end()
    assert.equal(sum._done, true)
  })
  it('filters evens a flux', () => {
    const flux = new Flux(1)
    const evens = flux.filter(value => value % 2 === 0)
    flux.publish(1)
    assert.equal(evens._value, undefined)
    flux.publish(2)
    assert.equal(evens._value, 2)
    flux.publish(3)
    assert.equal(evens._value, 2)
    flux.publish(4)
    assert.equal(evens._value, 4)
    flux.end()
    assert.equal(evens._done, true)
  })
  it('rejects evens a flux', () => {
    const flux = new Flux(1)
    const odds = flux.reject(value => value % 2 === 0)
    flux.publish(1)
    assert.equal(odds._value, 1)
    flux.publish(2)
    assert.equal(odds._value, 1)
    flux.publish(3)
    assert.equal(odds._value, 3)
    flux.publish(4)
    assert.equal(odds._value, 3)
    flux.end()
    assert.equal(odds._done, true)
  })
  it('compacts a flux', () => {
    const flux = new Flux(1)
    const compact = flux.compact()
    flux.publish(1)
    assert.equal(compact._value, 1)
    flux.publish(null)
    assert.equal(compact._value, 1)
    flux.publish(3)
    assert.equal(compact._value, 3)
    flux.publish(undefined)
    assert.equal(compact._value, 3)
    flux.end()
    assert.equal(compact._done, true)
  })
  it('merges a flux with another flux', () => {
    const flux = new Flux(1)
    const flux2 = new Flux('a')
    const merged = flux.mergeRace(flux2)
    flux.publish(1)
    assert.equal(merged._value, 1)
    flux2.publish('b')
    assert.equal(merged._value, 'b')
    flux2.publish('c')
    assert.equal(merged._value, 'c')
    flux.publish(5)
    assert.equal(merged._value, 5)
    flux2.end()
    assert.equal(merged._done, true)
  })
  it('mergesAll a flux with another flux', () => {
    const flux = new Flux(1)
    const flux2 = new Flux('a')
    const merged = flux.mergeAll(flux2)
    flux.publish(1)
    assert.equal(merged._value, 1)
    flux2.publish('b')
    assert.equal(merged._value, 'b')
    flux2.publish('c')
    assert.equal(merged._value, 'c')
    flux.publish(5)
    assert.equal(merged._value, 5)
    flux2.end()
    assert.equal(merged._done, false)
    flux.end()
    assert.equal(merged._done, true)
  })
})

describe('Aggregate', () => {
  it('aggregates an array', () => {
    const aggregate = Flux.aggregate([])
    assert.equal(aggregate._structure.length, 0)
    const flux = new Flux(1)
    aggregate.push(flux)
    assert.equal(aggregate._structure[0], flux)
    assert.equal(aggregate._value[0], 1)
    flux.publish(2)
    assert.equal(aggregate._value[0], 2)
    const flux2 = new Flux('a')
    aggregate.push(flux2)
    assert.equal(aggregate._structure[1], flux2)
    assert.equal(aggregate._value[1], 'a')
    flux2.publish('b')
    assert.equal(aggregate._value[0], 2)
    assert.equal(aggregate._value[1], 'b')
    aggregate.remove(flux)
    assert.equal(aggregate._structure[0], flux2)
    assert.equal(aggregate._value[0], 'b')
    aggregate.delete(0)
    assert.equal(aggregate._structure.length, 0)
    assert.equal(aggregate._value.length, 0)
  })
  it('aggregates a hash', () => {
    const aggregate = Flux.aggregate({})
    assert.equal(Object.keys(aggregate._structure).length, 0)
    const flux = new Flux(1)
    aggregate.set('flux1', flux)
    assert.equal(aggregate._structure.flux1, flux)
    assert.equal(aggregate._value.flux1, 1)
    flux.publish(2)
    assert.equal(aggregate._value.flux1, 2)
    const flux2 = new Flux('a')
    aggregate.set('flux2', flux2)
    assert.equal(aggregate._structure.flux2, flux2)
    assert.equal(aggregate._value.flux2, 'a')
    flux2.publish('b')
    assert.equal(aggregate._value.flux1, 2)
    assert.equal(aggregate._value.flux2, 'b')
    aggregate.remove(flux)
    assert.equal(aggregate._structure.flux1, undefined)
    assert.equal(aggregate._structure.flux2, flux2)
    assert.equal(aggregate._value.flux1, undefined)
    assert.equal(aggregate._value.flux2, 'b')
    aggregate.delete('flux2')
    assert.equal(Object.keys(aggregate._structure).length, 0)
    assert.equal(Object.keys(aggregate._value).length, 0)
  })
})