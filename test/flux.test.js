const { Flux } = require('../lib/flux')
const assert = require('assert').strict

describe('Flux basics', () => {
  const flux = new Flux(Flux.push(1))
  it('has correct internal value', () => {
    assert.equal(flux.value(), 1)
  })
  it('is not done', () => {
    assert.equal(flux.done(), false)
  })
  it('publishes correctly', () => {
    flux.push(2)
    assert.equal(flux.value(), 2)
    assert.equal(flux.done(), false)
  })
  it('ends correctly', () => {
    flux.end()
    assert.equal(flux.value(), 2)
    assert.equal(flux.done(), true)
  })
})

describe('Flux subscriptions', () => {
  const flux = new Flux(Flux.push(1))
  const subscription = (value) => {
      assert.equal(value, 2)
    }
  it('subscribes correctly', () => {
    flux.subscribe(subscription)
    flux.push(2)
  })
  it('unsubscribes correctly', () => {
    flux.unsubscribe(subscription)
    flux.push(3)
  })
})

describe('Flux other methods', () => {
  it('maps double a flux', () => {
    const flux = new Flux(Flux.push(1))
    const dup = flux.map(value => value * 2)
    flux.push(4)
    assert.equal(dup.value(), 8)
    flux.end()
    assert.equal(dup.done(), true)
  })
  it('reduces sum a flux', () => {
    const flux = new Flux(Flux.push(1))
    const sum = flux.reduce((acc, value) => acc + value, 0)
    flux.push(7)
    assert.equal(sum.value(), 7)
    flux.push(3)
    assert.equal(sum.value(), 10)
    flux.end()
    assert.equal(sum.done(), true)
  })
  it('filters evens a flux (starts not satisfying the condition)', () => {
    const flux = new Flux(Flux.push(1))
    const evens = flux.filter(value => value % 2 === 0)
    flux.push(1)
    assert.equal(evens.value(), undefined)
    flux.push(2)
    assert.equal(evens.value(), 2)
    flux.push(3)
    assert.equal(evens.value(), 2)
    flux.push(4)
    assert.equal(evens.value(), 4)
    flux.end()
    assert.equal(evens.done(), true)
  })
  it('filters evens a flux (starts satisfying the condition)', () => {
    const flux = new Flux(Flux.push(0))
    const evens = flux.filter(value => value % 2 === 0)
    assert.equal(evens.value(), 0)
    flux.push(1)
    assert.equal(evens.value(), 0)
    flux.push(2)
    assert.equal(evens.value(), 2)
    flux.push(3)
    assert.equal(evens.value(), 2)
    flux.push(4)
    assert.equal(evens.value(), 4)
    flux.end()
    assert.equal(evens.done(), true)
  })
  it('rejects evens a flux  (starts satisfying the condition)', () => {
    const flux = new Flux(Flux.push(1))
    const odds = flux.reject(value => value % 2 === 0)
    flux.push(1)
    assert.equal(odds.value(), 1)
    flux.push(2)
    assert.equal(odds.value(), 1)
    flux.push(3)
    assert.equal(odds.value(), 3)
    flux.push(4)
    assert.equal(odds.value(), 3)
    flux.end()
    assert.equal(odds.done(), true)
  })
  it('rejects evens a flux  (starts not satisfying the condition)', () => {
    const flux = new Flux(Flux.push(0))
    const odds = flux.reject(value => value % 2 === 0)
    assert.equal(odds.value(), undefined)
    flux.push(1)
    assert.equal(odds.value(), 1)
    flux.push(2)
    assert.equal(odds.value(), 1)
    flux.push(3)
    assert.equal(odds.value(), 3)
    flux.push(4)
    assert.equal(odds.value(), 3)
    flux.end()
    assert.equal(odds.done(), true)
  })
  it('compacts a flux', () => {
    const flux = new Flux(Flux.push(1))
    const compact = flux.compact()
    flux.push(1)
    assert.equal(compact.value(), 1)
    flux.push(null)
    assert.equal(compact.value(), 1)
    flux.push(3)
    assert.equal(compact.value(), 3)
    flux.push(undefined)
    assert.equal(compact.value(), 3)
    flux.end()
    assert.equal(compact.done(), true)
  })
  it('returns the last 2 elements pushed to a flux', () => {
    const flux = new Flux(Flux.push(1))
    const last2 = flux.last(2)
    assert.deepEqual(last2.value(), [])
    flux.push(7)
    assert.deepEqual(last2.value(), [7])
    flux.push(3)
    assert.deepEqual(last2.value(), [3,7])
    flux.push(2)
    assert.deepEqual(last2.value(), [2,3])
    flux.end()
    assert.deepEqual(last2.done(), true)
  })
  it('merges a flux with another flux', () => {
    const flux = new Flux(Flux.push(1))
    const flux2 = new Flux(Flux.push('a'))
    const merged = flux.mergeRace(flux2)
    flux.push(1)
    assert.equal(merged.value(), 1)
    flux2.push('b')
    assert.equal(merged.value(), 'b')
    flux2.push('c')
    assert.equal(merged.value(), 'c')
    flux.push(5)
    assert.equal(merged.value(), 5)
    flux2.end()
    assert.equal(merged.done(), true)
  })
  it('mergesAll a flux with another flux', () => {
    const flux = new Flux(Flux.push(1))
    const flux2 = new Flux(Flux.push('a'))
    const merged = flux.mergeAll(flux2)
    flux.push(1)
    assert.equal(merged.value(), 1)
    flux2.push('b')
    assert.equal(merged.value(), 'b')
    flux2.push('c')
    assert.equal(merged.value(), 'c')
    flux.push(5)
    assert.equal(merged.value(), 5)
    flux2.end()
    assert.equal(merged.done(), false)
    flux.end()
    assert.equal(merged.done(), true)
  })
})

// describe('Aggregate', () => {
//   it('aggregates an array', () => {
//     const aggregate = Flux.aggregate([])
//     assert.equal(aggregate._structure.length, 0)
//     const flux = new Flux(1)
//     aggregate.push(flux)
//     assert.equal(aggregate._structure[0], flux)
//     assert.equal(aggregate.value()[0], 1)
//     flux.push(2)
//     assert.equal(aggregate.value()[0], 2)
//     const flux2 = new Flux('a')
//     aggregate.push(flux2)
//     assert.equal(aggregate._structure[1], flux2)
//     assert.equal(aggregate._value[1], 'a')
//     flux2.push('b')
//     assert.equal(aggregate._value[0], 2)
//     assert.equal(aggregate._value[1], 'b')
//     aggregate.remove(flux)
//     assert.equal(aggregate._structure[0], flux2)
//     assert.equal(aggregate._value[0], 'b')
//     aggregate.delete(0)
//     assert.equal(aggregate._structure.length, 0)
//     assert.equal(aggregate._value.length, 0)
//   })
//   it('aggregates a hash', () => {
//     const aggregate = Flux.aggregate({})
//     assert.equal(Object.keys(aggregate._structure).length, 0)
//     const flux = new Flux(1)
//     aggregate.set('flux1', flux)
//     assert.equal(aggregate._structure.flux1, flux)
//     assert.equal(aggregate._value.flux1, 1)
//     flux.push(2)
//     assert.equal(aggregate._value.flux1, 2)
//     const flux2 = new Flux('a')
//     aggregate.set('flux2', flux2)
//     assert.equal(aggregate._structure.flux2, flux2)
//     assert.equal(aggregate._value.flux2, 'a')
//     flux2.push('b')
//     assert.equal(aggregate._value.flux1, 2)
//     assert.equal(aggregate._value.flux2, 'b')
//     aggregate.remove(flux)
//     assert.equal(aggregate._structure.flux1, undefined)
//     assert.equal(aggregate._structure.flux2, flux2)
//     assert.equal(aggregate._value.flux1, undefined)
//     assert.equal(aggregate._value.flux2, 'b')
//     aggregate.delete('flux2')
//     assert.equal(Object.keys(aggregate._structure).length, 0)
//     assert.equal(Object.keys(aggregate._value).length, 0)
//   })
// })